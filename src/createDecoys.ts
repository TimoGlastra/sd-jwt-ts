import { Hasher } from './sdJwt'
import { OrPromise } from './types'

/**
 * Function which returns a salt generated by a CSPRNG.
 *
 * Recommended size is 128 bits (i.e. 16 bytes).
 *
 * Salts will not be seeded and a new one will be used for each claim.
 *
 * @example
 *
 * Node.js: `crypto.randomBytes(128 / 8)`
 *
 * React Native: `expo-standard-web-crypto`
 *
 * Browser: `crypto.getRandomValues(new Uint8Array(128 / 8))`
 */
export type SaltGenerator = () => OrPromise<string>

export const createDecoys = async (
    count: number,
    saltGenerator: SaltGenerator,
    hasher: Hasher
) => {
    const decoys: Array<string> = []
    for (let i = 0; i < count; i++) {
        const salt = await saltGenerator()
        const decoy = await hasher(salt)
        decoys.push(decoy)
    }
    return decoys
}
